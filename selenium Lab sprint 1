Selenium Lab

	1. Introduction 

1.1. Purpose This lab is here to teach users how to use one of the most widely used test automation tools in python. 

1.2. Scope This document details the requirements, functionalities, and non-functional attributes of the Selenium Lab. 

1.3. Definitions and Acronyms 

UI: User Interface 

Selenium: is an open-source, automated testing tool used to test web applications across various browsers 

DSl: A technology for high-speed network or Internet access over voice lines 

WebDriver: A collection of open-source APIs used for automating web application testing. 

2. System Overview 

2.1. Objectives of the Selenium Lab 

Automated browser actions for web application testing. 

Understand and utilize Selenium WebDriver using Python. 

Validate web application UI elements and functionalities. 

2.2. Prerequisites 

Python 

Install Selenium  

Web Browser (I.e., Google Chrome, Firefox) 

Selenium WebDriver 

PyCharm 

3. Functional Requirements 

3.1. Web Browser Automation 

Automate tasks like opening a web browser, navigating to a webpage, clicking on links, filling forms, and closing the browser. 

3.2. UI Element Interaction 

Identify and interact with various UI elements such as text boxes, radio buttons, dropdowns, and checkboxes. 

3.4. Capture Screenshots 

Verify with a screen capture that the output the user has received is the expected one for the lab. 

3.4.1 Validation 

Validate webpage elements to ensure that they display the expected values or behaviors. 

 

4. Non-functional Requirements 

4.1. Performance 

Make sure program runs at an appropriate speed with little to no slow down  

4.2. Reliability 

Tests should adhere to consistency and deliverable results should be repeatable. 

4.3. Scalability 

Test scripts should be designed to accommodate potential future expansions or changes in the web application under test. 

5. Deliverables 

Automated test scripts for specified test scenarios. 

Documentation on: 

Steps to set up and run the tests. 

Explanation of each test script and its objectives. 

Screenshots folder containing the captured images. 

Test execution report. 

6. Conclusion The Selenium Lab will serve as a hands-on introduction to web automation, where students will learn the capabilities of Selenium WebDriver using Python. By the end of this lab, students should have a basic understanding automating basic web interactions and validations, providing them with a solid foundation for more complex web testing scenarios. 

7. Appendices 

7.1. Sample Test Scenarios A list of some web applications or pages, along with their expected behaviors, which the students can use for initial testing. 

 

Scenario 1: Sign in/ sign out functionality 

Application/Page: To-do list 

Steps: 

Open web browser and navigate to user sign in 

Enter the Username and password for the account 

“Click” the sign on button. Then sign out. 

Expected Behavior: User should see and be able to verify that they were able to sign in the account and then see that they were able to sign off the account successfully. 

 

Scenario 2:  List view functionality 

Application/Page: To-Do list 

Steps:  

Open web browser and sign in 

Enter or “check” 2 to 3 items in To-Do list 

Bring up the list view and look at what is displayed 

Expected Behavior: List view should display the 2 or 3 items that the user “checked” properly. 

 

Scenario 3: Verify user authentication 

Applications/Page: To-Do list 

Open web browser 

Sign in using a username and password. 

Sign in using a username with a different password. 

Expected Behavior: User should be able to sign in using password but not sign in using a fake password. 

 

 

Scenario 4: Delete functionality 

Applications/Page: To-Do list 

Open web browser. 

Login using username and password. 

Add or “check” items in To-do list. 

Display list view of added items. 

Delete one item from list 

Display list view again. 

Expected Behavior: User should see that item deleted properly after displaying the list view the second time. 

 

Scenario 5: Update functionality 

Applications/Page: To-Do list 

Open web browser and sign in using username and password. 

Add or “check” 3 items for To-do list. 

Display the list view of selected items. 

Add 1 more item to the list. 

Display list view again. 

Expected Behavior: User should see that item updated properly and was added after displaying the list view from the first time. 
