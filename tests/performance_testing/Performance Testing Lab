Group 10 Performance Testing Lab 

  

1. Introduction 

1.1. Purpose 

Performance testing is a crucial aspect of ensuring that a software application performs well under different scenarios and loads. In this tutorial, you will learn the fundamentals of performance testing, set up a performance testing environment, and practice creating and running performance tests using pyjnius, JMeter, locust, a popular open-source performance testing tool. 

1.2. Scope 

The Sub SRS provides specifics to the Performance Testing Lab. This includes its environments requirements, expected outcomes, and deliverables so you can have a better understanding of the TDD (Test Driven Development) testing methodology and know how to write some test cases on your own. 

1.4. What is Performance Testing? 

Performance Testing in general is a testing practice performed to determine how a system performs in terms of responsiveness and stability under a particular workload. 

1.3. Definitions and Acronyms 

Performance Testing: testing measure that evaluates the speed, responsiveness and stability of a computer, network, software program when under a certain amount of stress. 

IDE: Integrated Development Environment 

`pytest`: A testing framework that allows you to easily create small, simple test 

JMeter: is a load test will simulate end-user behavior that approaches the limits of an application's specifications 

Locust: an open-source load testing tool 

SRS: A software requirements specification  

 

1.4. Performance Testing Process 

Identify performance scenarios 

Plan and design performance test script 

Configure the test environment & distribute the load 

Execute test scripts 

See Result 

Analysis result 

Identify the bottleneck 

Re-run test to see if there were any changes 

 

2. TDD Lab Overview 

2.1. General Requirements 

A computer with an internet connection. 

Locust installed. 

Apache JMeter installed (download it from the official website). 

Basic knowledge of web applications and HTTP protocols. 

  

2.2. Lab Tools 

 

Python  

IDE (I.e., Visual studios) 

Selenium (for web application testing in some scenarios) 

Pyjnius 

JMeter 

  

3. Functional Requirements 

Unit tests. 

PYTest 

  

3.1 Running Tests 

Using proper performance tools 

Interpretation of test results, both passes, and failures. 

 

4. Non-functional Requirements 

4.1. Documentation 

When making comments make sure each one has meaning and there are not a bunch of them 

A summary report detailing the number of passed, failed, and skipped tests. 

  

4.2. Collaboration 

Open communication among team members when defining scenarios. 

Use GitHub for version control 

Microsoft Teams is used for discussions 

 

5. Deliverables 

What specific tests were run (Examples). 

A test report showing the results after running the tests. 

 

6. Conclusion 

Performance testing ensures that the program is operating at its peak efficiency. Also, making sure that it performs well under different loads. Using tools such as JMeter, locust, a popular open-source performance testing tool, we will get a better understanding of performance testing. 

7. Appendices 

7.1. Sample Scenarios 

Scenario 1: Expand your locust test to include multiple tasks simulating different user behaviors (e.g., logging in, browsing, and making a purchase). Run the test and observe the results in the locust web interface. 

Scenario 2: Add item to out to-do list 

Scenario 3: Bring up entered to do list and verify accuracy 

Scenario 4: After verifying to do list accuracy, delete item and review list again to ensure it is not on there 
